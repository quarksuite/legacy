export declare type Swatch = string;
export declare type Scheme = Swatch[];
export declare type Variation = Swatch[];
export declare type Palette = (Swatch | Variation)[];
export declare type Formats = 'hex' | 'rgb' | 'hsl' | 'named';
export declare type Degrees = number;
export declare type Percent = number;
export declare type Limit = number;
export interface ColorDataSchema {
    origin: Swatch;
    current: Swatch;
    scheme: Scheme;
    variation: Variation;
    palette: Palette;
}
export declare const complementOf: (color: string) => string;
export declare const negationOf: (color: string) => string;
export declare const mix: (color: string, withTarget: string, byAmount?: number) => string;
export declare const spinHueFrom: (color: string, toDegrees: number, counterClockwise?: boolean) => string;
export declare const changeFormatOf: (color: string, toTargetFormat?: Formats) => string;
export declare const analogousFrom: (color: string, spreadBy?: number) => Scheme;
export declare const complementaryFrom: (color: string) => Scheme;
export declare const triadFrom: (color: string, complementSplitBy?: number) => Scheme;
export declare const tetradFrom: (color: string, spreadBy?: number) => Scheme;
export declare const createBlendFrom: (color: string, toTarget: string, withContrast?: number, upToRange?: number) => Variation;
export declare const createTintsFrom: (color: string, withContrast?: number, upToRange?: number) => Variation;
export declare const createTonesFrom: (color: string, withContrast?: number, upToRange?: number) => Variation;
export declare const createShadesFrom: (color: string, withContrast?: number, upToRange?: number) => Variation;
export declare class Color {
    private color;
    private origin;
    private current;
    private scheme;
    private variation;
    private palette;
    constructor(color: Swatch);
    get originalValue(): Swatch;
    get value(): Swatch;
    get schemes(): Scheme;
    get variations(): Variation;
    get palettes(): Palette;
    get data(): ColorDataSchema;
    log(): void;
    formatSwatch(format: Formats): Color;
    shiftHue(toDegrees: Degrees, counterClockwise?: boolean): Color;
    fetchComplement(): Color;
    neutralize(): Color;
    mix(withTarget: Swatch, byAmount?: Percent): Color;
    createComplementary(): Color;
    createAnalogous(withSpread?: Degrees): Color;
    createTriad(withComplementSplit?: Degrees): Color;
    createTetrad(withSpread?: Degrees): Color;
    createBlend(toTarget: Swatch, withContrast?: Percent, upToRange?: Limit): Color;
    createTints(withContrast?: Percent, upToRange?: Limit): Color;
    createTones(withContrast?: Percent, upToRange?: Limit): Color;
    createShades(withContrast?: Percent, upToRange?: Limit): Color;
}
export declare const color: (color: string) => Color;
export declare const colour: (color: string) => Color;
export declare const c: (color: string) => Color;
